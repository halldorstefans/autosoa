// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obd_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obd_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obd_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obd_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obd_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obd_5fservice_2eproto;
namespace obd {
class FuelLevelRequest;
class FuelLevelRequestDefaultTypeInternal;
extern FuelLevelRequestDefaultTypeInternal _FuelLevelRequest_default_instance_;
class FuelLevelResponse;
class FuelLevelResponseDefaultTypeInternal;
extern FuelLevelResponseDefaultTypeInternal _FuelLevelResponse_default_instance_;
class FuelLevelStreamRequest;
class FuelLevelStreamRequestDefaultTypeInternal;
extern FuelLevelStreamRequestDefaultTypeInternal _FuelLevelStreamRequest_default_instance_;
}  // namespace obd
PROTOBUF_NAMESPACE_OPEN
template<> ::obd::FuelLevelRequest* Arena::CreateMaybeMessage<::obd::FuelLevelRequest>(Arena*);
template<> ::obd::FuelLevelResponse* Arena::CreateMaybeMessage<::obd::FuelLevelResponse>(Arena*);
template<> ::obd::FuelLevelStreamRequest* Arena::CreateMaybeMessage<::obd::FuelLevelStreamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace obd {

// ===================================================================

class FuelLevelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:obd.FuelLevelRequest) */ {
 public:
  inline FuelLevelRequest() : FuelLevelRequest(nullptr) {};
  virtual ~FuelLevelRequest();

  FuelLevelRequest(const FuelLevelRequest& from);
  FuelLevelRequest(FuelLevelRequest&& from) noexcept
    : FuelLevelRequest() {
    *this = ::std::move(from);
  }

  inline FuelLevelRequest& operator=(const FuelLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuelLevelRequest& operator=(FuelLevelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuelLevelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelLevelRequest* internal_default_instance() {
    return reinterpret_cast<const FuelLevelRequest*>(
               &_FuelLevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FuelLevelRequest& a, FuelLevelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FuelLevelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuelLevelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuelLevelRequest* New() const final {
    return CreateMaybeMessage<FuelLevelRequest>(nullptr);
  }

  FuelLevelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuelLevelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuelLevelRequest& from);
  void MergeFrom(const FuelLevelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelLevelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "obd.FuelLevelRequest";
  }
  protected:
  explicit FuelLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obd_5fservice_2eproto);
    return ::descriptor_table_obd_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 1,
  };
  // string vehicle_id = 1;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_id(
      std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // @@protoc_insertion_point(class_scope:obd.FuelLevelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obd_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FuelLevelStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:obd.FuelLevelStreamRequest) */ {
 public:
  inline FuelLevelStreamRequest() : FuelLevelStreamRequest(nullptr) {};
  virtual ~FuelLevelStreamRequest();

  FuelLevelStreamRequest(const FuelLevelStreamRequest& from);
  FuelLevelStreamRequest(FuelLevelStreamRequest&& from) noexcept
    : FuelLevelStreamRequest() {
    *this = ::std::move(from);
  }

  inline FuelLevelStreamRequest& operator=(const FuelLevelStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuelLevelStreamRequest& operator=(FuelLevelStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuelLevelStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelLevelStreamRequest* internal_default_instance() {
    return reinterpret_cast<const FuelLevelStreamRequest*>(
               &_FuelLevelStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FuelLevelStreamRequest& a, FuelLevelStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FuelLevelStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuelLevelStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuelLevelStreamRequest* New() const final {
    return CreateMaybeMessage<FuelLevelStreamRequest>(nullptr);
  }

  FuelLevelStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuelLevelStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuelLevelStreamRequest& from);
  void MergeFrom(const FuelLevelStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelLevelStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "obd.FuelLevelStreamRequest";
  }
  protected:
  explicit FuelLevelStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obd_5fservice_2eproto);
    return ::descriptor_table_obd_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 1,
    kIntervalSecondsFieldNumber = 2,
  };
  // string vehicle_id = 1;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_id(
      std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // uint32 interval_seconds = 2;
  void clear_interval_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_seconds() const;
  void set_interval_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interval_seconds() const;
  void _internal_set_interval_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:obd.FuelLevelStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obd_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FuelLevelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:obd.FuelLevelResponse) */ {
 public:
  inline FuelLevelResponse() : FuelLevelResponse(nullptr) {};
  virtual ~FuelLevelResponse();

  FuelLevelResponse(const FuelLevelResponse& from);
  FuelLevelResponse(FuelLevelResponse&& from) noexcept
    : FuelLevelResponse() {
    *this = ::std::move(from);
  }

  inline FuelLevelResponse& operator=(const FuelLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuelLevelResponse& operator=(FuelLevelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuelLevelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelLevelResponse* internal_default_instance() {
    return reinterpret_cast<const FuelLevelResponse*>(
               &_FuelLevelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FuelLevelResponse& a, FuelLevelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FuelLevelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuelLevelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuelLevelResponse* New() const final {
    return CreateMaybeMessage<FuelLevelResponse>(nullptr);
  }

  FuelLevelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuelLevelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuelLevelResponse& from);
  void MergeFrom(const FuelLevelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelLevelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "obd.FuelLevelResponse";
  }
  protected:
  explicit FuelLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obd_5fservice_2eproto);
    return ::descriptor_table_obd_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 4,
    kTimestampMsFieldNumber = 2,
    kLevelPercentFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // uint64 timestamp_ms = 2;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float level_percent = 1;
  void clear_level_percent();
  float level_percent() const;
  void set_level_percent(float value);
  private:
  float _internal_level_percent() const;
  void _internal_set_level_percent(float value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:obd.FuelLevelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ms_;
  float level_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obd_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FuelLevelRequest

// string vehicle_id = 1;
inline void FuelLevelRequest::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FuelLevelRequest::vehicle_id() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelRequest.vehicle_id)
  return _internal_vehicle_id();
}
inline void FuelLevelRequest::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelRequest.vehicle_id)
}
inline std::string* FuelLevelRequest::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:obd.FuelLevelRequest.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& FuelLevelRequest::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void FuelLevelRequest::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuelLevelRequest::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:obd.FuelLevelRequest.vehicle_id)
}
inline void FuelLevelRequest::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:obd.FuelLevelRequest.vehicle_id)
}
inline void FuelLevelRequest::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:obd.FuelLevelRequest.vehicle_id)
}
inline std::string* FuelLevelRequest::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuelLevelRequest::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:obd.FuelLevelRequest.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuelLevelRequest::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:obd.FuelLevelRequest.vehicle_id)
}
inline std::string* FuelLevelRequest::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:obd.FuelLevelRequest.vehicle_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vehicle_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FuelLevelRequest::unsafe_arena_set_allocated_vehicle_id(
    std::string* vehicle_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:obd.FuelLevelRequest.vehicle_id)
}

// -------------------------------------------------------------------

// FuelLevelStreamRequest

// string vehicle_id = 1;
inline void FuelLevelStreamRequest::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FuelLevelStreamRequest::vehicle_id() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelStreamRequest.vehicle_id)
  return _internal_vehicle_id();
}
inline void FuelLevelStreamRequest::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelStreamRequest.vehicle_id)
}
inline std::string* FuelLevelStreamRequest::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:obd.FuelLevelStreamRequest.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& FuelLevelStreamRequest::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void FuelLevelStreamRequest::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuelLevelStreamRequest::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:obd.FuelLevelStreamRequest.vehicle_id)
}
inline void FuelLevelStreamRequest::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:obd.FuelLevelStreamRequest.vehicle_id)
}
inline void FuelLevelStreamRequest::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:obd.FuelLevelStreamRequest.vehicle_id)
}
inline std::string* FuelLevelStreamRequest::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuelLevelStreamRequest::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:obd.FuelLevelStreamRequest.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuelLevelStreamRequest::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:obd.FuelLevelStreamRequest.vehicle_id)
}
inline std::string* FuelLevelStreamRequest::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:obd.FuelLevelStreamRequest.vehicle_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vehicle_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FuelLevelStreamRequest::unsafe_arena_set_allocated_vehicle_id(
    std::string* vehicle_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:obd.FuelLevelStreamRequest.vehicle_id)
}

// uint32 interval_seconds = 2;
inline void FuelLevelStreamRequest::clear_interval_seconds() {
  interval_seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuelLevelStreamRequest::_internal_interval_seconds() const {
  return interval_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuelLevelStreamRequest::interval_seconds() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelStreamRequest.interval_seconds)
  return _internal_interval_seconds();
}
inline void FuelLevelStreamRequest::_internal_set_interval_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_seconds_ = value;
}
inline void FuelLevelStreamRequest::set_interval_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interval_seconds(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelStreamRequest.interval_seconds)
}

// -------------------------------------------------------------------

// FuelLevelResponse

// float level_percent = 1;
inline void FuelLevelResponse::clear_level_percent() {
  level_percent_ = 0;
}
inline float FuelLevelResponse::_internal_level_percent() const {
  return level_percent_;
}
inline float FuelLevelResponse::level_percent() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelResponse.level_percent)
  return _internal_level_percent();
}
inline void FuelLevelResponse::_internal_set_level_percent(float value) {
  
  level_percent_ = value;
}
inline void FuelLevelResponse::set_level_percent(float value) {
  _internal_set_level_percent(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelResponse.level_percent)
}

// uint64 timestamp_ms = 2;
inline void FuelLevelResponse::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuelLevelResponse::_internal_timestamp_ms() const {
  return timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuelLevelResponse::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelResponse.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void FuelLevelResponse::_internal_set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ms_ = value;
}
inline void FuelLevelResponse::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelResponse.timestamp_ms)
}

// int32 status = 3;
inline void FuelLevelResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuelLevelResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuelLevelResponse::status() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelResponse.status)
  return _internal_status();
}
inline void FuelLevelResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void FuelLevelResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelResponse.status)
}

// string error_message = 4;
inline void FuelLevelResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FuelLevelResponse::error_message() const {
  // @@protoc_insertion_point(field_get:obd.FuelLevelResponse.error_message)
  return _internal_error_message();
}
inline void FuelLevelResponse::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:obd.FuelLevelResponse.error_message)
}
inline std::string* FuelLevelResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:obd.FuelLevelResponse.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& FuelLevelResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void FuelLevelResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuelLevelResponse::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:obd.FuelLevelResponse.error_message)
}
inline void FuelLevelResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:obd.FuelLevelResponse.error_message)
}
inline void FuelLevelResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:obd.FuelLevelResponse.error_message)
}
inline std::string* FuelLevelResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuelLevelResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:obd.FuelLevelResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuelLevelResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:obd.FuelLevelResponse.error_message)
}
inline std::string* FuelLevelResponse::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:obd.FuelLevelResponse.error_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FuelLevelResponse::unsafe_arena_set_allocated_error_message(
    std::string* error_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:obd.FuelLevelResponse.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace obd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obd_5fservice_2eproto
