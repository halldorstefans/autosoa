// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: obd_service.proto

#include "obd_service.pb.h"
#include "obd_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace obd {

static const char* OBDService_method_names[] = {
  "/obd.OBDService/GetFuelLevel",
  "/obd.OBDService/StreamFuelLevel",
};

std::unique_ptr< OBDService::Stub> OBDService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OBDService::Stub> stub(new OBDService::Stub(channel));
  return stub;
}

OBDService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetFuelLevel_(OBDService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamFuelLevel_(OBDService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status OBDService::Stub::GetFuelLevel(::grpc::ClientContext* context, const ::obd::FuelLevelRequest& request, ::obd::FuelLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFuelLevel_, context, request, response);
}

void OBDService::Stub::experimental_async::GetFuelLevel(::grpc::ClientContext* context, const ::obd::FuelLevelRequest* request, ::obd::FuelLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFuelLevel_, context, request, response, std::move(f));
}

void OBDService::Stub::experimental_async::GetFuelLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::obd::FuelLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFuelLevel_, context, request, response, std::move(f));
}

void OBDService::Stub::experimental_async::GetFuelLevel(::grpc::ClientContext* context, const ::obd::FuelLevelRequest* request, ::obd::FuelLevelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFuelLevel_, context, request, response, reactor);
}

void OBDService::Stub::experimental_async::GetFuelLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::obd::FuelLevelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFuelLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::obd::FuelLevelResponse>* OBDService::Stub::AsyncGetFuelLevelRaw(::grpc::ClientContext* context, const ::obd::FuelLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::obd::FuelLevelResponse>::Create(channel_.get(), cq, rpcmethod_GetFuelLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::obd::FuelLevelResponse>* OBDService::Stub::PrepareAsyncGetFuelLevelRaw(::grpc::ClientContext* context, const ::obd::FuelLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::obd::FuelLevelResponse>::Create(channel_.get(), cq, rpcmethod_GetFuelLevel_, context, request, false);
}

::grpc::ClientReader< ::obd::FuelLevelResponse>* OBDService::Stub::StreamFuelLevelRaw(::grpc::ClientContext* context, const ::obd::FuelLevelStreamRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::obd::FuelLevelResponse>::Create(channel_.get(), rpcmethod_StreamFuelLevel_, context, request);
}

void OBDService::Stub::experimental_async::StreamFuelLevel(::grpc::ClientContext* context, ::obd::FuelLevelStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::obd::FuelLevelResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::obd::FuelLevelResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamFuelLevel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::obd::FuelLevelResponse>* OBDService::Stub::AsyncStreamFuelLevelRaw(::grpc::ClientContext* context, const ::obd::FuelLevelStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::obd::FuelLevelResponse>::Create(channel_.get(), cq, rpcmethod_StreamFuelLevel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::obd::FuelLevelResponse>* OBDService::Stub::PrepareAsyncStreamFuelLevelRaw(::grpc::ClientContext* context, const ::obd::FuelLevelStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::obd::FuelLevelResponse>::Create(channel_.get(), cq, rpcmethod_StreamFuelLevel_, context, request, false, nullptr);
}

OBDService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OBDService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OBDService::Service, ::obd::FuelLevelRequest, ::obd::FuelLevelResponse>(
          [](OBDService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::obd::FuelLevelRequest* req,
             ::obd::FuelLevelResponse* resp) {
               return service->GetFuelLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OBDService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OBDService::Service, ::obd::FuelLevelStreamRequest, ::obd::FuelLevelResponse>(
          [](OBDService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::obd::FuelLevelStreamRequest* req,
             ::grpc_impl::ServerWriter<::obd::FuelLevelResponse>* writer) {
               return service->StreamFuelLevel(ctx, req, writer);
             }, this)));
}

OBDService::Service::~Service() {
}

::grpc::Status OBDService::Service::GetFuelLevel(::grpc::ServerContext* context, const ::obd::FuelLevelRequest* request, ::obd::FuelLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OBDService::Service::StreamFuelLevel(::grpc::ServerContext* context, const ::obd::FuelLevelStreamRequest* request, ::grpc::ServerWriter< ::obd::FuelLevelResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace obd

