// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: obd_service.proto

package obdservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OBDService_GetFuelLevel_FullMethodName    = "/obd.OBDService/GetFuelLevel"
	OBDService_StreamFuelLevel_FullMethodName = "/obd.OBDService/StreamFuelLevel"
)

// OBDServiceClient is the client API for OBDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OBD Service definition
type OBDServiceClient interface {
	// Gets the current fuel level
	GetFuelLevel(ctx context.Context, in *FuelLevelRequest, opts ...grpc.CallOption) (*FuelLevelResponse, error)
	// Stream fuel level updates periodically
	StreamFuelLevel(ctx context.Context, in *FuelLevelStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FuelLevelResponse], error)
}

type oBDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOBDServiceClient(cc grpc.ClientConnInterface) OBDServiceClient {
	return &oBDServiceClient{cc}
}

func (c *oBDServiceClient) GetFuelLevel(ctx context.Context, in *FuelLevelRequest, opts ...grpc.CallOption) (*FuelLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FuelLevelResponse)
	err := c.cc.Invoke(ctx, OBDService_GetFuelLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBDServiceClient) StreamFuelLevel(ctx context.Context, in *FuelLevelStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FuelLevelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OBDService_ServiceDesc.Streams[0], OBDService_StreamFuelLevel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FuelLevelStreamRequest, FuelLevelResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OBDService_StreamFuelLevelClient = grpc.ServerStreamingClient[FuelLevelResponse]

// OBDServiceServer is the server API for OBDService service.
// All implementations must embed UnimplementedOBDServiceServer
// for forward compatibility.
//
// OBD Service definition
type OBDServiceServer interface {
	// Gets the current fuel level
	GetFuelLevel(context.Context, *FuelLevelRequest) (*FuelLevelResponse, error)
	// Stream fuel level updates periodically
	StreamFuelLevel(*FuelLevelStreamRequest, grpc.ServerStreamingServer[FuelLevelResponse]) error
	mustEmbedUnimplementedOBDServiceServer()
}

// UnimplementedOBDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOBDServiceServer struct{}

func (UnimplementedOBDServiceServer) GetFuelLevel(context.Context, *FuelLevelRequest) (*FuelLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelLevel not implemented")
}
func (UnimplementedOBDServiceServer) StreamFuelLevel(*FuelLevelStreamRequest, grpc.ServerStreamingServer[FuelLevelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFuelLevel not implemented")
}
func (UnimplementedOBDServiceServer) mustEmbedUnimplementedOBDServiceServer() {}
func (UnimplementedOBDServiceServer) testEmbeddedByValue()                    {}

// UnsafeOBDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OBDServiceServer will
// result in compilation errors.
type UnsafeOBDServiceServer interface {
	mustEmbedUnimplementedOBDServiceServer()
}

func RegisterOBDServiceServer(s grpc.ServiceRegistrar, srv OBDServiceServer) {
	// If the following call pancis, it indicates UnimplementedOBDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OBDService_ServiceDesc, srv)
}

func _OBDService_GetFuelLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuelLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBDServiceServer).GetFuelLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OBDService_GetFuelLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBDServiceServer).GetFuelLevel(ctx, req.(*FuelLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBDService_StreamFuelLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FuelLevelStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OBDServiceServer).StreamFuelLevel(m, &grpc.GenericServerStream[FuelLevelStreamRequest, FuelLevelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OBDService_StreamFuelLevelServer = grpc.ServerStreamingServer[FuelLevelResponse]

// OBDService_ServiceDesc is the grpc.ServiceDesc for OBDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OBDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obd.OBDService",
	HandlerType: (*OBDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFuelLevel",
			Handler:    _OBDService_GetFuelLevel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFuelLevel",
			Handler:       _OBDService_StreamFuelLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "obd_service.proto",
}
