// lighting_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lighting_service.proto

package obdservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LightingService_GetHeadlightState_FullMethodName = "/lighting.LightingService/GetHeadlightState"
	LightingService_SetHeadlight_FullMethodName      = "/lighting.LightingService/SetHeadlight"
)

// LightingServiceClient is the client API for LightingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightingServiceClient interface {
	// Get the current state of the headlight
	GetHeadlightState(ctx context.Context, in *GetHeadlightStateRequest, opts ...grpc.CallOption) (*GetHeadlightStateResponse, error)
	// Set the state of the headlight
	SetHeadlight(ctx context.Context, in *SetHeadlightRequest, opts ...grpc.CallOption) (*SetHeadlightResponse, error)
}

type lightingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLightingServiceClient(cc grpc.ClientConnInterface) LightingServiceClient {
	return &lightingServiceClient{cc}
}

func (c *lightingServiceClient) GetHeadlightState(ctx context.Context, in *GetHeadlightStateRequest, opts ...grpc.CallOption) (*GetHeadlightStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHeadlightStateResponse)
	err := c.cc.Invoke(ctx, LightingService_GetHeadlightState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightingServiceClient) SetHeadlight(ctx context.Context, in *SetHeadlightRequest, opts ...grpc.CallOption) (*SetHeadlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHeadlightResponse)
	err := c.cc.Invoke(ctx, LightingService_SetHeadlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightingServiceServer is the server API for LightingService service.
// All implementations must embed UnimplementedLightingServiceServer
// for forward compatibility.
type LightingServiceServer interface {
	// Get the current state of the headlight
	GetHeadlightState(context.Context, *GetHeadlightStateRequest) (*GetHeadlightStateResponse, error)
	// Set the state of the headlight
	SetHeadlight(context.Context, *SetHeadlightRequest) (*SetHeadlightResponse, error)
	mustEmbedUnimplementedLightingServiceServer()
}

// UnimplementedLightingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLightingServiceServer struct{}

func (UnimplementedLightingServiceServer) GetHeadlightState(context.Context, *GetHeadlightStateRequest) (*GetHeadlightStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadlightState not implemented")
}
func (UnimplementedLightingServiceServer) SetHeadlight(context.Context, *SetHeadlightRequest) (*SetHeadlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeadlight not implemented")
}
func (UnimplementedLightingServiceServer) mustEmbedUnimplementedLightingServiceServer() {}
func (UnimplementedLightingServiceServer) testEmbeddedByValue()                         {}

// UnsafeLightingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightingServiceServer will
// result in compilation errors.
type UnsafeLightingServiceServer interface {
	mustEmbedUnimplementedLightingServiceServer()
}

func RegisterLightingServiceServer(s grpc.ServiceRegistrar, srv LightingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLightingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LightingService_ServiceDesc, srv)
}

func _LightingService_GetHeadlightState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadlightStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightingServiceServer).GetHeadlightState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LightingService_GetHeadlightState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightingServiceServer).GetHeadlightState(ctx, req.(*GetHeadlightStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightingService_SetHeadlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeadlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightingServiceServer).SetHeadlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LightingService_SetHeadlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightingServiceServer).SetHeadlight(ctx, req.(*SetHeadlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LightingService_ServiceDesc is the grpc.ServiceDesc for LightingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lighting.LightingService",
	HandlerType: (*LightingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeadlightState",
			Handler:    _LightingService_GetHeadlightState_Handler,
		},
		{
			MethodName: "SetHeadlight",
			Handler:    _LightingService_SetHeadlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lighting_service.proto",
}
